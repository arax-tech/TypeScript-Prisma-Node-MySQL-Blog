generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    User
    Admin
}

model User {
    id         Int       @id @default(autoincrement())
    name       String
    email      String    @unique
    password   String
    image      String?
    role       Role      @default(User)
    updated_at DateTime  @updatedAt
    created_at DateTime  @default(now())

    followings User[]    @relation("UserFollows")
    followers  User[]    @relation("UserFollows")

    posts      Post[]
    comments   Comment[]
    likes      Like[]

    @@map("users")
}

model Category {
    id         Int      @id @default(autoincrement())
    category   String
    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
    posts      Post[]

    @@map("categories")
}

model Post {
    id          Int       @id @default(autoincrement())
    user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id     Int
    category    Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
    category_id Int
    title       String
    description String?
    image       String?
    updated_at  DateTime  @updatedAt
    created_at  DateTime  @default(now())
    comments    Comment[]
    likes       Like[]
    tags        Tag[]

    @@map("posts")
}

model Tag {
    id         Int      @id @default(autoincrement())
    name       String   @unique
    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
    posts      Post[]

    @@map("tags")
}

model Comment {
    id         Int      @id @default(autoincrement())
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id    Int
    post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
    post_id    Int
    comment    String?
    ratings    Int      @default(0)
    updated_at DateTime @updatedAt
    created_at DateTime @default(now())

    @@map("comments")
}

model Like {
    id         Int      @id @default(autoincrement())
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id    Int
    post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
    post_id    Int
    updated_at DateTime @updatedAt
    created_at DateTime @default(now())

    @@map("likes")
}
